#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp GT>;
            label = "PIPE";
        };

        map: map {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PRCNT &kp LEFT_BRACE>;
            label = "MAP";
        };

        fn_js: fn_js {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "fn_js";
        };

        fn_ex: fn_ex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FN_EX";
        };

        alt_tab_macro: alt_tab_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp LEFT_GUI>;
            label = "ALT_TAB_MACRO";
        };

        windows_shutdown: windows_shutdown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp U>;
            label = "WINDOWS_SHUTDOWN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC         &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8           &kp N9        &kp N0    &kp BACKSPACE
&kp TAB         &kp Q      &kp W         &kp E         &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I            &kp O         &kp P     &kp LEFT_BRACKET
&kp LEFT_SHIFT  &kp A      &kp S         &kp D         &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K            &kp L         &kp SEMI  &kp SQT
&kp LCTRL       &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA        &kp DOT       &kp FSLH  &kp RIGHT_BRACKET
&kp C_MUTE      &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp ENTER        &kp ENTER  &mo 2   &kp RIGHT_SHIFT  &kp CAPSLOCK  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            display-name = "layer1";
            bindings = <
&trans      &kp LS(EXCL)          &kp LS(AT)             &kp LS(POUND)  &kp LS(DLLR)    &kp LS(PRCNT)         &mmv MOVE_UP     &kp LS(CARET)     &kp LS(AMPS)       &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)  &trans
&trans      &kp GRAVE             &kp LC(RIGHT)          &trans         &fn_js          &pipe                 &mmv MOVE_DOWN   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LS(MINUS)  &kp EQUAL     &kp MINUS     &kp PLUS
&trans      &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp EQUAL      &kp UNDERSCORE  &kp PIPE              &mmv MOVE_LEFT   &kp LEFT_ARROW    &kp DOWN_ARROW     &kp UP_ARROW   &kp RIGHT     &kp COLON     &kp DOUBLE_QUOTES
&trans      &trans                &trans                 &trans         &kp LG(V)       &kp LC(LEFT_ARROW)    &mmv MOVE_RIGHT  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LS(LT)     &kp LS(GT)    &trans        &trans
&kp C_MUTE  &trans                &trans                 &trans         &trans          &trans                &mkp LCLK        &trans            &kp SPACE          &trans         &trans        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE    &kp F1         &kp F2         &kp F3         &kp F4     &kp F5       &mmv MOVE_UP     &kp F6              &kp F7              &kp F8            &kp F9               &kp F10  &trans
&kp LA(TAB)  &kp LC(LS(E))  &kp LS(LA(E))  &kp LA(LS(A))  &kp LC(U)  &kp PG_UP    &mmv MOVE_DOWN   &kp LS(HOME)        &kp LS(END)         &kt HOME          &kp END              &trans   &trans
&trans       &kp LC(LS(A))  &trans         &trans         &kp LS(N)  &kp PG_DN    &mmv MOVE_LEFT   &kp LS(LEFT_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(UP_ARROW)  &kp LS(RIGHT_ARROW)  &kp END  &kp LS(PRINTSCREEN)
&trans       &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)  &trans       &mmv MOVE_RIGHT  &mkp LCLK           &mkp RCLK           &trans            &trans               &kp F11  &kp F12
&to 4        &trans         &trans         &trans         &trans     &trans       &mkp LCLK        &trans              &trans              &trans            &trans               &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans       &kp LG(N1)    &kp LG(N2)          &kp LG(N3)              &kp LG(N4)               &kp LG(N5)          &trans             &kp LG(N6)       &kp LG(N7)      &kp LG(N8)    &kp LG(N9)       &trans    &kp LC(PRINTSCREEN)
&kp LG(TAB)  &kp LG(LEFT)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)        &kp LG(RIGHT_ARROW)      &kp LC(M)           &trans             &trans           &trans          &trans        &trans           &kp HOME  &kp PG_UP
&trans       &trans        &trans              &trans                  &kp LC(M)                &kp LC(LEFT_ALT)    &trans             &msc SCRL_RIGHT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp END   &kp PG_DN
&trans       &trans        &trans              &kp LG(LC(LEFT_ARROW))  &kp LG(LC(RIGHT_ARROW))  &msc SCRL_DOWN      &trans             &trans           &trans          &trans        &trans           &trans    &trans
&kp LG(L)    &trans        &trans              &trans                  &trans                   &trans              &windows_shutdown  &trans           &trans          &trans        &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        layer_4 {
            bindings = <
&trans  &trans           &trans          &trans  &trans  &trans    &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans          &trans  &trans  &trans    &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans           &trans          &trans  &trans  &trans    &rgb_ug RGB_EFR  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans  &trans  &trans    &rgb_ug RGB_EFF  &trans  &trans  &trans  &trans  &trans  &trans
&to 0   &trans           &trans          &trans  &trans  &trans    &trans           &trans  &trans  &trans  &trans  &trans
            >;
        };

        shift {
            bindings = <
&trans     &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &trans  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)   &trans
&trans     &kp LS(Q)     &kp LS(W)   &kp LS(E)      &kp LS(R)     &kp LS(T)        &trans  &kp LS(Y)      &kp LS(U)     &kp LS(I)     &kp LS(O)     &kp LS(P)      &kp LS(PLUS)
&kp EQUAL  &kp LS(A)     &kp LS(S)   &kp LS(D)      &kp LS(F)     &kp LS(G)        &trans  &kp LS(H)      &kp LS(J)     &kp LS(K)     &kp LS(L)     &kp LS(COLON)  &kp MINUS
&trans     &kp LS(Z)     &kp LS(X)   &kp LS(C)      &kp LS(V)     &kp LS(B)        &trans  &kp LS(N)      &kp LS(M)     &kp LS(LT)    &kp LS(GT)    &kp LS(QMARK)  &trans
&trans     &trans        &trans      &trans         &trans        &trans           &trans  &trans         &trans        &trans        &trans        &trans
            >;
        };
    };
};
